pipeline {
    agent any 

   stages { 
    
     stage('Preparation') { 
      steps {
          cleanWs deleteDirs: true
          slackSend (color: "good", message: "Status: STARTED RE-DEPLOYMENT | Job: ${env.JOB_NAME} | Build number ${env.BUILD_NUMBER}")
          git 'https://github.com/jente-janssens/IaC'
      }
           
   }
   
   
    
    stage('Apply') {
    steps {
        
        sh "cd fitcycle_terraform_fix/ && terraform init --backend-config=\"bucket=secure-state-demo\" --backend-config=\"key=terraform.tfstate\" --backend-config=\"region=us-west-1\" -lock=false && terraform apply --input=false --var-file=example_vars_files/us_west_1_mysql.tfvars --auto-approve"
        sh "cd fitcycle_terraform_fix && terraform output --json > Terraform_Output.json"
    }
  }
  
    stage('Send Notification') {
        steps {
            script {
                if (params.VIOLATION_FOUND == true) { 
                    
                    slackSend (color: "good", message: "Status: RE-DEPLOYED CLOUD INFRA | Job: ${env.JOB_NAME} | Build number ${env.BUILD_NUMBER}")
                } else {
                    slackSend (color: "warning" , message: "Status: VIOLATION DID NOT MATCH. SKIP RE-DEPLOY | Job: ${env.JOB_NAME} | Build number ${env.BUILD_NUMBER}")
                }
            }
        }
    }

 }
 
 post {
        
        success {
            slackSend color: "good", message: "Status: PIPELINE ${currentBuild.result} | Job: ${env.JOB_NAME} | Build number ${env.BUILD_NUMBER}"
            archiveArtifacts artifacts: 'fitcycle_terraform_fix/Terraform_Output.json', fingerprint: true
            archiveArtifacts artifacts: 'violations_using_api.py', fingerprint: true           
        }
        aborted {
            slackSend color: "warning", message: "Status: ${currentBuild.result} | Job: ${env.JOB_NAME} | Build number ${env.BUILD_NUMBER}"
        }
 }
 
}